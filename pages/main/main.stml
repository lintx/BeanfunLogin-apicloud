<template>
    <safe-area class="page">
        <view class="header">
            <text class="title">BeanfunLogin</text>
        </view>
        <view class="body">
            <view class="login-view" v-show="!islogin">
                <input placeholder="beanfun帐号" class="input" v-model="logindata.username" />
                <input placeholder="beanfun密码" type="password" class="input" v-model="logindata.password" />
                <view class="input switch-view">
                    <switch v-bind:checked="security.saveIdPw" onchange={this.switchSaveIdPw}></switch>
                    <text>保存帐号密码</text>
                </view>
                <input placeholder="加密密码" type="password" v-show="security.saveIdPw" class="input" v-model="security.password" />
                <button class="input button_1" v-show="security.saveIdPw" onclick={this.loadSecurityIdPw}>读取保存的帐号密码</button>
                <view v-show="security.loadData.length>0" class="load-view">
                    <view v-for="(item, index) in security.loadData" class="switch-view load-view-item">
                        <text>{{item.id}}</text>
                        <button class="load-button" @click={this.login.bind(this,item)}>登录</button>
                        <button class="load-button" @click={this.delIdPwFromSecurity.bind(this,item.id)}>删除</button>
                    </view>
                </view>
                <button class="input button_1" onclick={this.login}>登录</button>
            </view>
            <view class="login-view" v-show="islogin">
                <text class="input">{{account.id }}</text>
                <text class="input">{{account.tempPassword }}</text>
                <button class="input button_1" onclick={this.copyid}>复制帐号</button>
                <button class="input button_1" onclick={this.copypw}>复制密码</button>
                <button class="input button_1" onclick={this.getOTP}>刷新密码</button>
                <button class="input button_1" onclick={this.relogin}>返回登录</button>
            </view>
        </view>
    </safe-area>
</template>
<script>
import CryptoJS from "../../script/des.js";
export default {
    name: 'main',
    apiready() {},
    data() {
        let saveIdPw = false;
        let local = api.getPrefs({sync: true,key: 'save'});
        saveIdPw = local=="1";
        return {
            islogin: false,
            security: {
                saveIdPw: saveIdPw,
                password: "",
                loadData:[]
            },
            cookies: {},
            logindata: {
                username: "",
                password: "",
                sessionkey: ""
            },
            gamedata: {
                serverCode: "610074",
                serverRegion: "T9",
                sn: ""
            },
            account: {
                id: "",
                sn: "",
                name: "",
                createTime: "",
                tempPassword: ""
            }
        };
    },
    methods: {
        switchSaveIdPw(e){
            this.data.security.saveIdPw = !this.data.security.saveIdPw
        },
        copyid() {
            let clipBoard = api.require('clipBoard');
            clipBoard.set({
                value: this.data.account.id
            }, function(ret, err) {
                if (ret) {
                    api.toast({
                        msg: "复制帐号成功"
                    });
                } else {
                    api.alert({
                        msg: "复制帐号失败"
                    });
                }
            });
        },
        copypw() {
            let clipBoard = api.require('clipBoard');
            clipBoard.set({
                value: this.data.account.tempPassword
            }, function(ret, err) {
                if (ret) {
                    api.toast({
                        msg: "复制密码成功"
                    });
                } else {
                    api.alert({
                        msg: "复制密码失败"
                    });
                }
            });
        },
        relogin() {
            this.data.islogin = false;
        },
        login(data) {
            if(typeof data==="object" && data.id && data.pw){
                this.logindata.username = data.id;
                this.logindata.password = data.pw;
            }
            api.showProgress({
                title: '正在登录...',
                modal: true
            });
            this.getSessionkey();
        },
        getSessionkey() {
            this.get({
                url: 'https://bfweb.hk.beanfun.com/beanfun_block/bflogin/default.aspx?service=999999_T0'
            }, (ret, err) => {
                this.getstringWithRegx(ret.body, /<span id=\"ctl00_ContentPlaceHolder1_lblOtp1\">(.*)<\/span>/, 1, "获取sessionkey失败", s => {
                    this.data.logindata.sessionKey = s;
                    this.regularLogin();
                });
            });
        },
        regularLogin() {
            this.get({
                url: "https://login.hk.beanfun.com/login/id-pass_form_newBF.aspx?otp1=" + this.data.logindata.sessionKey
            }, (ret, err) => {
                let viewstate = "";
                this.getstringWithRegx(ret.body, /id=\"__VIEWSTATE\" value=\"(.*)\" \/>/, 1, "获取viewstate失败", s => {
                    viewstate = s;
                });
                let eventvalidation = "";
                this.getstringWithRegx(ret.body, /id=\"__EVENTVALIDATION\" value=\"(.*)\" \/>/, 1, "获取eventvalidation失败", s => {
                    eventvalidation = s;
                });
                let viewstateGenerator = "";
                this.getstringWithRegx(ret.body, /id=\"__VIEWSTATEGENERATOR\" value=\"(.*)\" \/>/, 1, "获取viewstateGenerator失败", s => {
                    viewstateGenerator = s;
                });
                this.post({
                    url: "https://login.hk.beanfun.com/login/id-pass_form_newBF.aspx?otp1=" + this.data.logindata.sessionKey,
                    data: {
                        values: {
                            "__EVENTTARGET": "",
                            "__EVENTARGUMENT": "",
                            "__VIEWSTATE": viewstate,
                            "__VIEWSTATEGENERATOR": viewstateGenerator,
                            "__VIEWSTATEENCRYPTED": "",
                            "__EVENTVALIDATION": eventvalidation,
                            "t_AccountID": this.data.logindata.username,
                            "t_Password": this.data.logindata.password,
                            "btn_login": "登入"
                        }
                    }
                }, (ret, err) => {
                    if (this.cookies.bfWebToken) {
                        //登录成功
                        if(this.data.security.saveIdPw){
                            if(this.data.security.loadData.length>0){
                                //有数据，可以直接保存
                                this.saveAccountInfo();
                            }else{
                                let json = api.getPrefs({
                                    sync: true,
                                    key: 'idpw'
                                });
                                if(!json){
                                    //无数据，可以直接保存
                                    this.saveAccountInfo();
                                }else{
                                    //有数据但是没有输入密码保存，提示是否覆盖保存
                                    api.confirm({
                                        msg: `检测到本地有已保存的数据，但是没有输入密码并读取，保存帐号密码将导致原来已保存的帐号密码数据丢失，是否保存？`,
                                        buttons: ['确定', '取消']
                                    }, (ret, err) => {
                                        var index = ret.buttonIndex;
                                        if(index==1){
                                            this.saveAccountInfo();
                                        }
                                    });
                                }
                            }
                            
                        }
                        this.getAccountInfo();
                    } else {
                        api.hideProgress();
                        api.alert({
                            msg: "登录失败，请重试"
                        });
                    }
                });
            });
        },
        saveAccountInfo(){
            if(this.data.security.password.length<6){
                api.alert({msg:"密码保存失败！请输入6位或以上的密码以加密本地保存的密码！"})
                return;
            }
            this.addIdPwToSecurity();
            this.saveSecurityIdPw();
            api.setPrefs({
                key: 'save',
                value: 1
            });
            api.toast({
                msg: "密码保存到本地成功"
            });
        },
        getAccountInfo() {
            this.get({
                url: `https://bfweb.hk.beanfun.com/beanfun_block/auth.aspx?channel=game_zone&page_and_query=game_start.aspx%3Fservice_code_and_region%3D${this.data.gamedata.serverCode}_${this.data.gamedata.serverRegion}&web_token=${this.data.cookies.bfWebToken}`
            }, (ret, err) => {
                // console.log(JSON.stringify(ret))
                let reg = /<li.*?onclick=.*?><div id=\"(\w+)\" sn=\"(\d+)\" name=\"(.*?)\"/;
                let r = ret.body.match(reg);
                if (!r) {
                    api.hideProgress();
                    api.alert({
                        msg: "获取帐号信息失败"
                    });
                    return;
                }
                this.data.account.id = r[1];
                this.data.account.sn = r[2];
                this.data.account.name = r[3];
                this.getSn();
            });
        },
        getSn() {
            this.get({
                url: `https://bfweb.hk.beanfun.com/beanfun_block/game_zone/game_start_step2.aspx?service_code=${this.data.gamedata.serverCode}&service_region=${this.data.gamedata.serverRegion}&sotp=${this.data.account.sn}&dt=0`
            }, (ret, err) => {
                this.getstringWithRegx(ret.body, /ServiceAccountCreateTime: \"([^\"]+)\"/, 1, "获取ServiceAccountCreateTime失败", s => {
                    this.data.account.createTime = s;
                });
                this.getstringWithRegx(ret.body, /GetResultByLongPolling&key=(.*)\"/, 1, "获取opt sn失败", s => {
                    this.data.gamedata.sn = s;
                });
                api.hideProgress();
                this.getOTP();
            });
        },
        getOTP() {
            api.showProgress({
                title: '正在获取密码...',
                modal: true
            });
            this.get({
                url: `https://bfweb.hk.beanfun.com/beanfun_block/generic_handlers/get_webstart_otp.ashx?SN=${this.data.gamedata.sn}&WebToken=${this.data.cookies.bfWebToken}&SecretCode=${this.data.cookies.bfSecretCode}&ppppp=1F552AEAFF976018F942B13690C990F60ED01510DDF89165F1658CCE7BC21DBA&ServiceCode=${this.data.gamedata.serverCode}&ServiceRegion=${this.data.gamedata.serverRegion}&ServiceAccount=${this.data.account.id}&CreateTime=${this.data.account.createTime.replace(" ", "%20")}&d=0`
            }, (ret, err) => {
                // console.log(JSON.stringify(ret));
                let body = ret.body;
                let arr = body.split(";");
                if (arr.length < 2) {
                    api.hideProgress();
                    api.alert({
                        msg: "获取otp失败"
                    });
                    return;
                }
                if (arr[0] != "1") {
                    api.hideProgress();
                    api.alert({
                        msg: arr[1]
                    });
                    return;
                }
                let str = arr[1];
                let key = str.substr(0, 8);
                let plain = str.substr(8);
                let otp = this.decryptByDES(plain, key);
                if (otp.length >= 10) {
                    this.data.islogin = true;
                    this.data.account.tempPassword = otp;
                }
                api.hideProgress();
            });
        },
        decryptByDES(ciphertext, key) {
            let keyHex = CryptoJS.enc.Utf8.parse(key);
            let decrypted = CryptoJS.DES.decrypt(CryptoJS.enc.Base64.stringify(CryptoJS.enc.Hex.parse(ciphertext)), keyHex, {
                mode: CryptoJS.mode.ECB,
                pad: CryptoJS.pad.NoPadding
            });
            let result_value = decrypted.toString(CryptoJS.enc.Utf8).split('\0')[0];
            return result_value;
        },
        encryptByDES(ciphertext, key) {
            let keyHex = CryptoJS.enc.Utf8.parse(key);
            let encrypted = CryptoJS.DES.encrypt(ciphertext, keyHex, {
                mode: CryptoJS.mode.ECB,
                pad: CryptoJS.pad.NoPadding
            });
            let result_value = encrypted.ciphertext.toString();
            return result_value;
        },
        addIdPwToSecurity(){
            let data = {
                id: this.data.logindata.username,
                pw: this.data.logindata.password
            };
            let has = false;
            for(let i=0,size=this.data.security.loadData.length;i<size;i++){
                if(this.data.security.loadData[i].id==data.id){
                    this.data.security.loadData[i].pw = data.pw;
                    has = true;
                    break;
                }
            }
            if(!has){
                this.data.security.loadData.push(data);
            }
        },
        delIdPwFromSecurity(id){
            api.confirm({
                msg: `是否要将${id}从保存的数据中删除？`,
                buttons: ['确定', '取消']
            }, (ret, err) => {
                var index = ret.buttonIndex;
                if(index==1){
                    let index = -1;
                    for(let i=0,size=this.data.security.loadData.length;i<size;i++){
                        if(this.data.security.loadData[i].id==id){
                            index = i;
                            break;
                        }
                    }
                    if(index==-1){
                        api.alert({msg:`没有在已保存的密码中找到${id}！`})
                        return;
                    }
                    this.data.security.loadData.splice(index, 1);
                    this.saveSecurityIdPw();
                    api.alert({msg:`删除成功！`})
                }
            });
        },
        saveSecurityIdPw() {
            if(this.data.security.loadData.length>0){
                let json = JSON.stringify(this.data.security.loadData);
                let securityData = this.encryptByDES(json, this.data.security.password);
                api.setPrefs({
                    key: 'idpw',
                    value: securityData
                });
            }else{
                api.removePrefs({
                    key: 'idpw'
                });
            }
        },
        loadSecurityIdPw() {
            if(this.data.security.password.length<6){
                api.alert({msg:"请输入6位或以上的密码以解密本地保存的密码！"})
                return;
            }
            //先判断本地文件是否存在之类
            let json = api.getPrefs({
                sync: true,
                key: 'idpw'
            });
            if(!json){
                api.alert({msg:"没有保存的帐号密码"})
                return;
            }
            let securityData = this.decryptByDES(json, this.data.security.password);
            if(!securityData){
                api.alert({msg:"密码错误，解密失败！"})
                return;
            }
            try {
                let data = JSON.parse(securityData);
                this.data.security.loadData = data;
            } catch (e) {
                api.alert({
                    msg: "错误" + e.message
                });
                return;
            }
        },
        getstringWithRegx(str, reg, index, msg, func) {
            let r = str.match(reg);
            if (!r) {
                api.alert({
                    msg: msg
                });
                return false;
            }
            if (r.length + 1 < index) {
                api.alert({
                    msg: msg
                });
                return false;
            }
            if (r[index]) {
                func(r[index]);
            } else {
                api.alert({
                    msg: msg
                });
                return false;
            }
        },
        get(config, callback) {
            this.request(config, callback);
        },
        post(config, callback) {
            this.request(Object.assign({
                method: "post"
            }, config), callback);
        },
        request(config, callback) {
            config = Object.assign({
                returnAll: true,
                dataType: "text",
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36'
                }
            }, config);
            api.ajax(config, (ret, err) => {
                if (ret && ret.headers && ret.headers["Set-Cookie"]) {
                    let cookie = ret.headers["Set-Cookie"];
                    let ca = cookie = cookie.split(",");
                    ca.forEach(c => {
                        let a = c.split(";")[0];
                        let index = a.indexOf("=");
                        let key = a.substr(0, index).trim();
                        let val = a.substr(index + 1).trim();
                        if (key.length > 0 && val.length > 0) {
                            this.data.cookies[key] = val;
                        }
                    });
                }
                if (ret) {
                    callback(ret, err);
                } else {
                    console.log(JSON.stringify(err));
                    api.alert({
                        title: "错误",
                        msg: err.msg
                    });
                }
            });
        }
    }
};
</script>
<style>
.page {
    height: 100%;
    background: #fff;
}

.header {
    height: 44px;
    justify-content: center;
    align-items: center;
}

.title {
    font-size: 16px;
    font-weight: bold;
    color: #333;
}

.body {
    background: #f5f6f7;
    flex: 1;
}

.h1 {
    font-size: 22px;
    font-weight: bold;
    color: #333;
    text-align: center;
    margin: 50px;
}


.login-view {
    padding: 8px;
    text-align: center;
    align-content: flex-end;
    display: flex;
    flex-direction: column;
}

.switch-view{
    flex-direction: row;
}

.input {
    font-size: 20px;
    height: 40px;
    width: 60%;
    margin: 8px auto 0;
    padding: 8px;
}

.button_1 {
    border-color: #dfdfdf;
    border-top-color: #dfdfdf;
    border-left-color: #dfdfdf;
    border-right-color: #dfdfdf;
    border-bottom-color: #dfdfdf
}

.load-button{
    width:60px;
    height: 40px;
    padding: 0;
    font-size: 16px;
    margin-left: 8px;
}
.load-view{
    margin: 8px auto 0;
    width: 80%;
}
.load-view-item{
    border-color: #333;
    border-width: 1px;
    border-style: solid;
}
</style>
